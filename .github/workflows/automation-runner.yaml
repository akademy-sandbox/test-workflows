name: Automation Runner

on:
  repository_dispatch:
    types: [trigger-automation]

jobs:
  initilize-configurations:
    name: Initialize Configurations
    runs-on: ubuntu-latest
    outputs:
      dot_env_file_cache_key: ${{ steps.set-cache-keys.outputs.dot_env_file_cache_key }}
      automation_task: ${{ steps.set-output-vars.outputs.automation_task }}
      action: ${{ steps.set-output-vars.outputs.action }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Debug GitHub Output variables
        run: |
          echo "APPLICATION: ${{ github.event.client_payload.application }}"
          echo "AUTOMATION_TASK: ${{ github.event.client_payload.automation_task }}"
          echo "ACTION: ${{ github.event.client_payload.action }}"
          echo "DATA_CENTRE: ${{ github.event.client_payload.data_centre }}"
          echo "ENVIRONMENT: ${{ github.event.client_payload.environment }}"
          echo "ENVIRONMENT_TYPE: ${{ github.event.client_payload.environment_type }}"

      - name: Append output variables to .env file
        run: |
          echo "APPLICATION=${{ github.event.client_payload.application }}" >> .env
          echo "AUTOMATION_TASK=${{ github.event.client_payload.automation_task }}" >> .env
          echo "ACTION=${{ github.event.client_payload.action }}" >> .env
          echo "DATA_CENTRE=${{ github.event.client_payload.data_centre }}" >> .env
          echo "ENVIRONMENT=${{ github.event.client_payload.environment }}" >> .env
          echo "ENVIRONMENT_TYPE=${{ github.event.client_payload.environment_type }}" >> .env

      - name: Debug Environment Variables
        run: |
          chmod u+x ${{ github.workspace }}/common-resources/utils/bash/debug_dot_env.sh
          ${{ github.workspace }}/common-resources/utils/bash/debug_dot_env.sh

      - name: Load inventory to .env file
        run: |
          export $(cat .env | xargs)
          echo "Loading inventory..."
          chmod +x ${{ github.workspace }}/common-resources/utils/bash/load_env_vars.sh
          ${{ github.workspace }}/common-resources/utils/bash/load_env_vars.sh
        env:
          INVENTORY_FILE_PATH: "${{ github.workspace}}/common-resources/configs/inventory.yml"
          GLOBAL_CONFIGS_PATH: "${{ github.workspace}}/common-resources/configs/global_configs.yml"
          LOAD_INVENTORY_UTIL_PATH: "${{ github.workspace}}/common-resources/utils/python/load_inventory.py"
          LOAD_GLOBAL_CONFIGS_UTIL_PATH: "${{ github.workspace}}/common-resources/utils/python/load_global_configs.py"
        
      - name: Debug Environment Variables
        run: |
          chmod u+x ${{ github.workspace }}/common-resources/utils/bash/debug_dot_env.sh
          ${{ github.workspace }}/common-resources/utils/bash/debug_dot_env.sh

      - name: Export cache keys to GitHub vars
        id: set-cache-keys
        run: |
         export $(cat .env | xargs)
         chmod +x ${{ github.workspace }}/common-resources/utils/bash/github_set_env.sh
         chmod +x ${{ github.workspace }}/common-resources/utils/bash/github_set_output.sh
         ${{ github.workspace }}/common-resources/utils/bash/github_set_output.sh --DOT_ENV_FILE_CACHE_KEY "$DOT_ENV_FILE_CACHE_KEY"
         ${{ github.workspace }}/common-resources/utils/bash/github_set_env.sh --dot_env_file_cache_key "$DOT_ENV_FILE_CACHE_KEY"      
      
      - name: Cache .env file
        if: true
        uses: actions/cache@main
        with:   
          path: .env
          key: ${{ env.DOT_ENV_FILE_CACHE_KEY }}

      - name: Export output variables
        id: set-output-vars
        run: |
          export $(cat .env | xargs)
          echo "automation_task=${AUTOMATION_TASK}" >> $GITHUB_ENV
          echo "action=${ACTION}" >> $GITHUB_ENV

  run-automation-task:
    name: Run Automation Task
    runs-on: ubuntu-latest
    
    needs: initilize-configurations
    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Debug GitHub Output variables
        run: |
          echo "ENV_CACHE_KEY: ${{ needs.initilize-configurations.outputs.dot_env_file_cache_key }}"

      - name: Retrieve .env File from Cache
        uses: actions/cache@main
        with:
          path: .env
          key: ${{ needs.initilize-configurations.outputs.dot_env_file_cache_key }}

      - name: Debug Environment Variables
        run: |
          chmod u+x ${{ github.workspace }}/common-resources/utils/bash/debug_dot_env.sh
          ${{ github.workspace }}/common-resources/utils/bash/debug_dot_env.sh

      - name: Export service user and password to github env varaibles
        run: |
            export $(cat .env | xargs)
            if [ "${ENVIRONMENT}" != "PROD" ]; then
                service_user="v-akarthik"
                service_user_password="password"
            else
                service_user="${{ vars.PROD_ONPREM_CI_SERVICE_USER_NAME }}"
                service_user_password="${{ secrets.PROD_ONPREM_CI_SERVICE_USER_PASSWORD }}"
            fi
            echo "SERVICE_USER_NAME=${service_user}" >> $GITHUB_ENV
            echo "SERVICE_USER_PASSWORD=${service_user_password}" >> $GITHUB_ENV    

      - name: Setup working dir on the Jump Server 
        if: true
        run: |
          export $(cat .env | xargs)
          sshpass -p "${{ env.SERVICE_USER_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            "${{ env.SERVICE_USER_NAME }}@$JUMP_SERVER_HOST" "mkdir -p $WORKING_DIR && rm -rf $WORKING_DIR/*"
          echo "Working directory setup on Jump Server completed"
          
      - name: Copy autoamtion scripts to working dir on the Jump Server
        run: |
          export $(cat .env | xargs)
          sshpass -p "${{ env.SERVICE_USER_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            -r ${{ github.workspace }}/.[!.]* ${{ github.workspace }}/* "${{ env.SERVICE_USER_NAME }}@$JUMP_SERVER_HOST:$WORKING_DIR/"
          echo "Automation scripts copied to Jump Server"   

      - name: Run automation script on the Jump Server
        run: |
          export $(cat .env | xargs)
          sshpass -p "${{ env.SERVICE_USER_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            "${{ env.SERVICE_USER_NAME }}@$JUMP_SERVER_HOST" "cd $WORKING_DIR && chmod +x $AUTOMATION_TASK/main.sh && $AUTOMATION_TASK/main.sh ${{ env.SERVICE_USER_PASSWORD}}"    